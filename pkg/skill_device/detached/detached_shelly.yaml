rest_command:
  detached_shelly:
    url: "{{ urls|default(none) }}"

sensor:
  - platform: rest
    name: rest_btn_type
    resource_template: "{{state_attr('sensor.detached_list','btn_type')[states('input_number.rest_btn_index')|int(0)|default(0)]|default(none)}}"
    method: GET
    value_template: "{{state_attr('sensor.detached_list','detached_on')[states('input_number.rest_btn_index')|int(0)]|default(ok)|replace('detached','')}}"
    json_attributes:
    - btn_type
    - button_type
    - in_mode
    - btn1_type
    - btn2_type

input_number:
  rest_btn_index:
    name: rest_btn_index
    min: 0
    initial: 1
    max: 999
    step: 1

template:
  - sensor:
      - name: Detached list
        state: "{{'test'}}"
        attributes:
          # lista url per abilitare detached
          detached_on: >
            {%- set ns = namespace( url_switch0= [], url_switch1= [], url_switch2= [], url_switch3 = [],btn1_type = [],btn2_type = [], url_light0  = [], url_roller = [], url_cover = [],  url_white = [],url_color = [],  url_relay0 = [],  url_relay1= [],  url_relay2= [],  url_relay3 = []) %}
            {% set entity_covers = integration_entities('shelly') | select('search', '^cover.') | map('device_id') | unique| reject('eq',None)| list %}
            {% set entity_relay = integration_entities('shelly') | select('search', '(^switch.|^light.)') | map('device_id') | unique| reject('eq',None)| list %}
            {% for device in entity_covers if is_device_attr(device, 'model','Shelly 2.5') or is_device_attr(device, 'model','Shelly 2')%}
              {%- set ns.url_cover = ns.url_cover + [ device_attr(device, 'configuration_url')+('/settings/roller/0?btn_type=detached') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly 2.5') or is_device_attr(device, 'model','Shelly 2') or is_device_attr(device, 'model','Shelly 1') or is_device_attr(device, 'model','Shelly 1PM') or is_device_attr(device, 'model','Shelly 4Pro') or is_device_attr(device, 'model','Shelly UNI') or is_device_attr(device, 'model','Shelly 2.5')%}
              {%- set ns.url_relay0 = ns.url_relay0 + [ device_attr(device, 'configuration_url')+('/settings/relay/0?btn_type=detached') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly 2.5') or is_device_attr(device, 'model','Shelly 2') or is_device_attr(device, 'model','Shelly 4Pro') or is_device_attr(device, 'model','Shelly UNI')%}
              {%- set ns.url_relay1 = ns.url_relay1 + [ device_attr(device, 'configuration_url')+('/settings/relay/1?btn_type=detached') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly 4Pro')%}
              {%- set ns.url_relay2 = ns.url_relay2 + [ device_attr(device, 'configuration_url')+('/settings/relay/2?btn_type=detached') ] %}
              {%- set ns.url_relay3 = ns.url_relay3 + [ device_attr(device, 'configuration_url')+('/settings/relay/3?btn_type=detached') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly RGBW2')%}
              {%- set ns.url_white = ns.url_white + [ device_attr(device, 'configuration_url')+('/settings/white/0?btn_type=detached') ] %}
              {%- set ns.url_color = ns.url_color + [ device_attr(device, 'configuration_url')+('/settings/color/0?btn_type=detached') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly Dimmer')or is_device_attr(device, 'model','Shelly Dimmer 2')%}
              {%- set ns.url_light0 = ns.url_light0 + [ device_attr(device, 'configuration_url')+('/settings/light/0?btn_type=detached') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly 1L')%}
              {%- set ns.btn2_type = ns.btn2_type + [ device_attr(device, 'configuration_url')+('/settings/relay/0?btn2_type=detached') ] %}
              {%- set ns.btn1_type = ns.btn1_type + [ device_attr(device, 'configuration_url')+('/settings/relay/0?btn1_type=detached') ] %}
            {%endfor%}
            {% for device in entity_covers if is_device_attr(device, 'model','Shelly Plus 2PM')%}
              {%- set ns.url_roller = ns.url_roller + [ device_attr(device, 'configuration_url')+('/rpc/Cover.SetConfig?id=0&config={"in_mode":"detached"}') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly Pro 4PM')%}
              {%- set ns.url_switch3 = ns.url_switch3 + [ device_attr(device, 'configuration_url')+('/rpc/Switch.SetConfig?id=3&config={"in_mode":"detached"}') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly Pro 4PM') or is_device_attr(device, 'model','Shelly Pro 3')%}
              {%- set ns.url_switch2 = ns.url_switch2 + [ device_attr(device, 'configuration_url')+('/rpc/Switch.SetConfig?id=2&config={"in_mode":"detached"}') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly Pro 4PM') or is_device_attr(device, 'model','Shelly Pro 3') or is_device_attr(device, 'model','Shelly Pro 2PM')or is_device_attr(device, 'model','Shelly Pro 2') or is_device_attr(device, 'model','Shelly Plus 2PM')%}
              {%- set ns.url_switch1 = ns.url_switch1 + [ device_attr(device, 'configuration_url')+('/rpc/Switch.SetConfig?id=1&config={"in_mode":"detached"}') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly Pro 4PM') or is_device_attr(device, 'model','Shelly Pro 3') or is_device_attr(device, 'model','Shelly Pro 2PM')or is_device_attr(device, 'model','Shelly Pro 2') or is_device_attr(device, 'model','Shelly Plus 2PM') or is_device_attr(device, 'model','Shelly Pro 1PM')or is_device_attr(device, 'model','Shelly Pro 1')or is_device_attr(device, 'model','Shelly Plus 1')or is_device_attr(device, 'model','Shelly Plus 1PM')%}
              {%- set ns.url_switch0 = ns.url_switch0 + [ device_attr(device, 'configuration_url')+('/rpc/Switch.SetConfig?id=0&config={"in_mode":"detached"}') ] %}
            {%endfor%}
            {{ ns.url_switch0 + ns.url_switch1 + ns.url_switch2 + ns.url_switch3 + ns.url_cover + ns.url_roller + ns.btn1_type + ns.btn2_type + ns.url_light0 + ns.url_color + ns.url_white + ns.url_relay0 + ns.url_relay1 + ns.url_relay2 + ns.url_relay3}}

          # list url per recuperare impostazione bottone shelly utilizzata
          btn_type: >
            {%- set ns = namespace( url_switch0= [], url_switch1= [], url_switch2= [], url_switch3 = [],btn1_type = [],btn2_type = [], url_light0  = [], url_roller = [], url_cover = [],  url_white = [],url_color = [],  url_relay0 = [],  url_relay1= [],  url_relay2= [],  url_relay3 = []) %}
            {% set entity_covers = integration_entities('shelly') | select('search', '^cover.') | map('device_id') | unique| reject('eq',None)| list %}
            {% set entity_relay = integration_entities('shelly') | select('search', '(^switch.|^light.)') | map('device_id') | unique| reject('eq',None)| list %}
            {% for device in entity_covers if is_device_attr(device, 'model','Shelly 2.5') or is_device_attr(device, 'model','Shelly 2')%}
              {%- set ns.url_cover = ns.url_cover + [ device_attr(device, 'configuration_url')+('/settings/roller/0') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly 2.5') or is_device_attr(device, 'model','Shelly 2') or is_device_attr(device, 'model','Shelly 1') or is_device_attr(device, 'model','Shelly 1PM') or is_device_attr(device, 'model','Shelly 4Pro') or is_device_attr(device, 'model','Shelly UNI') or is_device_attr(device, 'model','Shelly 2.5')%}
              {%- set ns.url_relay0 = ns.url_relay0 + [ device_attr(device, 'configuration_url')+('/settings/relay/0') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly 2.5') or is_device_attr(device, 'model','Shelly 2') or is_device_attr(device, 'model','Shelly 4Pro') or is_device_attr(device, 'model','Shelly UNI')%}
              {%- set ns.url_relay1 = ns.url_relay1 + [ device_attr(device, 'configuration_url')+('/settings/relay/1') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly 4Pro')%}
              {%- set ns.url_relay2 = ns.url_relay2 + [ device_attr(device, 'configuration_url')+('/settings/relay/2') ] %}
              {%- set ns.url_relay3 = ns.url_relay3 + [ device_attr(device, 'configuration_url')+('/settings/relay/3') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly RGBW2')%}
              {%- set ns.url_white = ns.url_white + [ device_attr(device, 'configuration_url')+('/settings/white/0') ] %}
              {%- set ns.url_color = ns.url_color + [ device_attr(device, 'configuration_url')+('/settings/color/0') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly Dimmer')or is_device_attr(device, 'model','Shelly Dimmer 2')%}
              {%- set ns.url_light0 = ns.url_light0 + [ device_attr(device, 'configuration_url')+('/settings/light/0') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly 1L')%}
              {%- set ns.btn2_type = ns.btn2_type + [ device_attr(device, 'configuration_url')+('/settings/relay/0') ] %}
              {%- set ns.btn1_type = ns.btn1_type + [ device_attr(device, 'configuration_url')+('/settings/relay/0') ] %}
            {%endfor%}
            {% for device in entity_covers if is_device_attr(device, 'model','Shelly Plus 2PM')%}
              {%- set ns.url_roller = ns.url_roller + [ device_attr(device, 'configuration_url')+('/rpc/Cover.GetConfig?id=0') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly Pro 4PM')%}
              {%- set ns.url_switch3 = ns.url_switch3 + [ device_attr(device, 'configuration_url')+('/rpc/Switch.GetConfig?id=3') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly Pro 4PM') or is_device_attr(device, 'model','Shelly Pro 3')%}
              {%- set ns.url_switch2 = ns.url_switch2 + [ device_attr(device, 'configuration_url')+('/rpc/Switch.GetConfig?id=2') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly Pro 4PM') or is_device_attr(device, 'model','Shelly Pro 3') or is_device_attr(device, 'model','Shelly Pro 2PM')or is_device_attr(device, 'model','Shelly Pro 2') or is_device_attr(device, 'model','Shelly Plus 2PM')%}
              {%- set ns.url_switch1 = ns.url_switch1 + [ device_attr(device, 'configuration_url')+('/rpc/Switch.GetConfig?id=1') ] %}
            {%endfor%}
            {% for device in entity_relay if is_device_attr(device, 'model','Shelly Pro 4PM') or is_device_attr(device, 'model','Shelly Pro 3') or is_device_attr(device, 'model','Shelly Pro 2PM')or is_device_attr(device, 'model','Shelly Pro 2') or is_device_attr(device, 'model','Shelly Plus 2PM') or is_device_attr(device, 'model','Shelly Pro 1PM')or is_device_attr(device, 'model','Shelly Pro 1')or is_device_attr(device, 'model','Shelly Plus 1')or is_device_attr(device, 'model','Shelly Plus 1PM')%}
              {%- set ns.url_switch0 = ns.url_switch0 + [ device_attr(device, 'configuration_url')+('/rpc/Switch.GetConfig?id=0') ] %}
            {%endfor%}
            {{ ns.url_switch0 + ns.url_switch1 + ns.url_switch2 + ns.url_switch3 + ns.url_cover + ns.url_roller + ns.btn1_type + ns.btn2_type + ns.url_light0 + ns.url_color + ns.url_white + ns.url_relay0 + ns.url_relay1 + ns.url_relay2 + ns.url_relay3}}

  - trigger:
      - platform: state
        entity_id: input_number.rest_btn_index
    # crea la lista con url completa per ripristinare lo stato btn di tutti i device supportati
    sensor:
      - name: btn_type_list
        state: "{{'on' if trigger.to_state.state == '0.0' else 'off'}}"
        attributes:
          state_btn_type: >
            {% set btn_type = state_attr('sensor.rest_btn_type', 'btn_type') %}
            {% set button_type = state_attr('sensor.rest_btn_type', 'button_type') %}
            {% set in_mode = state_attr('sensor.rest_btn_type', 'in_mode') %}
            {% set btn1_type = state_attr('sensor.rest_btn_type', 'btn1_type') %}
            {% set btn2_type = state_attr('sensor.rest_btn_type', 'btn2_type') %}
            {% if btn_type != none %}
              {% set type = btn_type | string %}
            {% elif button_type != none %}
              {% set type = button_type | string %}
            {% elif in_mode != none %}
              {% set type = in_mode | string %}
            {% elif btn1_type != none %}
              {% set type = btn1_type | string %}
            {% elif btn2_type != none %}
              {% set type = btn2_type | string %}
            {% else %}
              {% set type = 'unknown' %}
            {% endif %}
              {% if trigger.to_state.state == '0.0' %}
            {{states('sensor.rest_btn_type')|string + type }}
            {% else %}
            {{this.attributes.state_btn_type|string +(', ')+ states('sensor.rest_btn_type')|string + type}}
            {%endif%}
script:
  detached_on:
    alias: Abilita detached
    sequence:
      - if: "{{is_state('script.btn_type','on')}}"
        then:
          - wait_template: "{{is_state('script.btn_type','off')}}"
          - repeat:
              count: "{{state_attr('sensor.detached_list','detached_on')|count}}"
              sequence:
                - service: rest_command.detached_shelly
                  data:
                    urls: "{{state_attr('sensor.detached_list','detached_on')[repeat.index-1]}}"
        else: 
          - repeat:
              count: "{{state_attr('sensor.detached_list','detached_on')|count}}"
              sequence:
                - service: rest_command.detached_shelly
                  data:
                    urls: "{{state_attr('sensor.detached_list','detached_on')[repeat.index-1]}}"

  detached_off:
    alias: Disabilita detached
    sequence:
      - if: "{{is_state('script.detached_on','on')}}"
        then:
          - wait_template: "{{is_state('script.detached_on','off')}}"
          - repeat:
              count: "{{state_attr('sensor.btn_type_list','state_btn_type').split(',')|count}}"
              sequence:
                - service: rest_command.detached_shelly
                  data:
                    urls: "{{state_attr('sensor.btn_type_list','state_btn_type').split(',')[repeat.index-1]}}"
        else: 
          - repeat:
              count: "{{state_attr('sensor.btn_type_list','state_btn_type').split(',')|count}}"
              sequence:
                - service: rest_command.detached_shelly
                  data:
                    urls: "{{state_attr('sensor.btn_type_list','state_btn_type').split(',')[repeat.index-1]}}"

  # ultimati i test questo script dovra essere eseguito nella prima sequenza di scipt.detached_on e cancellare questo script
  btn_type:
    alias: Salva stato pulsanti (controllo viene effettuato perchè l'attributo del sensor.btn_type_list salta un trigger)
    sequence:
      - repeat:
          count: "{{state_attr('sensor.detached_list','btn_type')|count}}"
          sequence:
            - service: input_number.set_value
              data:
                value: "{{repeat.index-1}}"
              target:
                entity_id: input_number.rest_btn_index
            - service: homeassistant.update_entity
              entity_id: sensor.rest_btn_type
